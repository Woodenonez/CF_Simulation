component sensors_new
%Plant of quadrocopter

inputs
    pos2 = {[0;0;0],'m'};   	%Position:left
    v2   = {[0;0;0],'m/s'};     %Velocity:left
    a2   = {[0;0;0],'m/s^2'};   %Acceleration:left
   
    angle2 = {[0;0;0],'rad'};   %Angle:left
    w2 = {[0;0;0],'rad/s'};     %Angular velocity:left
end

outputs
    acc2  = {[0;0;0],'1'};      %Accelerometer:right
    gyro2 = {[0;0;0],'deg/s'};  %Gyroscope:right
end

parameters(Access=private)
    m = {0.027,'kg'};%Mass
    g = {9.81,'m/s^2'};%Gravity
    d = {0.046,'m'};%Arm length
    b = {2.5383e-11,'1'};       % Lift constant
    k = {1.9796e-9,'1'};        % Drag constant
end

variables(Access=private)
    %Rotation matrix
    R2 ={[0,0,0;0,0,0;0,0,0],'1'};
    Rx2={[0,0,0;0,0,0;0,0,0],'1'};
    Ry2={[0,0,0;0,0,0;0,0,0],'1'};
    Rz2={[0,0,0;0,0,0;0,0,0],'1'};

end

equations

    %Rotation matrix between world and quadrocopter coordinates
    Rx2==[1,             0,              0;
          0,cos(angle2(1)),-sin(angle2(1));
          0,sin(angle2(1)), cos(angle2(1))];

    Ry2==[cos(angle2(2)),0,sin(angle2(2));
          0,             1,             0;
         -sin(angle2(2)),0,cos(angle2(2))];
    
    Rz2==[cos(angle2(3)),sin(angle2(3)),0;
         -sin(angle2(3)),cos(angle2(3)),0;
          0,           0,               1];
    
    R2==Rx2*Ry2*Rz2;
   
    % Accelerometer equation: adding the gravity component and scaling to unit (m/s^2/g = 1), then rotating to quadrotor frame
    R2*acc2 == a2/g + [0;0;1]; % = Rx*Ry*Rz*[0;0;sum(ctrl)]/m  -->  acc2_ref == [0;0;sum(ctrl)]/m
    % a ==  [0; 0; -g] + Rx*Ry*Rz*[0;0;sum(ctrl)]/m;
    
    % Gyroscope
    gyro2 == w2
end

end