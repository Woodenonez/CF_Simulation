component plant
%Plant of quadrocopter

inputs
   ctrl={[0;0;0;0],'N'}; %Thrust:left
end

outputs
    pos = {[0;0;0],'m'};       %Position:right
    v   = {[0;0;0], 'm/s' };   %Velocity:right
    a   = {[0;0;0], 'm/s^2' }; %Acceleration:right
    
    angle = {[0;0;0],'rad'};   %Angle:right
    w     = {[0;0;0],'rad/s'}; %Angular velocity:right
end

parameters
    m       = {0.027,'kg'};       %Mass
    g       = {9.81,'m/s^2'};     %Gravity
    d       = {2*0.046*(1/sqrt(2)),'m'};        %Arm length
    lift    = {1.9796e-9,'kg*m'}; %Lift constant "b"
    drag       = {2.5383e-11,'kg*m^2'};%Drag constant "k"
    Airfr   = {0.25,'kg/s'}      %Air friction coefficient "B"
end

parameters(Access=private)
    %Moment of inertia matrix
    Jx = {1.1463e-5,'kg*m^2'};
    Jy = {1.6993e-5,'kg*m^2'};
    Jz = {2.9944e-5,'kg*m^2'};
    J = [Jx,0,0;0,Jy,0;0,0,Jz];
   
    % Add time invariant parameters here 
end

variables(Access=private)
    
    % Add time variant variables here
%     omega1 = {0,'rad/s'}
%     omega2 = {0,'rad/s'}
%     omega3 = {0,'rad/s'}
%     omega4 = {0,'rad/s'}
    tau_z = {0,'N*m'};
    tau_y = {0,'N*m'};
    tau_x = {0,'N*m'};
%     Tau = {[0;0;0], 'N*m'};
    theta = {0,'rad'};
    phi = {0,'rad'};
    psi = {0,'rad'};
    rot_btw = {zeros(3,3),'1'};
%     gamma = {[0;0;0],'N*m'};
    
    rot_x = {zeros(3,3),'1'}
    rot_y = {zeros(3,3),'1'}
    rot_z = {zeros(3,3),'1'}
    
end

equations

    % Add all equations here
    tau_z == drag/lift*(-ctrl(1) - ctrl(3) + ctrl(2) + ctrl(4));
    tau_x == d/2*(ctrl(3) + ctrl(4) - ctrl(1) - ctrl(2));
    tau_y == d/2*(ctrl(3) + ctrl(2) - ctrl(4) - ctrl(1));
    J*w.der == cross(-w,J*w) + [tau_x;tau_y;tau_z];
%     Tau == [-1, -1,  1,  1;...
%             -1,  1,  1, -1;...
%             -1,  1, -1,  1] * ctrl .* [d/2; d/2; drag/lift];
%     J * w.der == -cross(w,J*w) + Tau; % body frame, w goes to Gyro directly

    rot_x == [1     0       0;
             0 cos(phi) -sin(phi);
             0 sin(phi)  cos(phi)];
    
    rot_y == [cos(theta) 0 sin(theta);
             0           1     0;
             -sin(theta) 0 cos(theta)];

    rot_z == [cos(psi) -sin(psi) 0;
             sin(psi) cos(psi)   0;
             0           0       1];
    
    rot_btw == rot_z*rot_y*rot_x;
    
    %a == 0;    % This is for project 3
%     a ==  [0; 0; -g] + rot_btw*[0;0;sum(ctrl)]/m - Airfr.*v/m; % with air friction
    m*a == [0 0 -m*g]' + rot_btw*[0;0;sum(ctrl)] - Airfr.*v;
    
    
    w == [1 0 sin(theta); 
          0 cos(phi) -sin(phi)*cos(theta); 
          0 sin(phi) cos(phi)*cos(theta)]*[phi.der;theta.der;psi.der];
    a == v.der; % This is for project 2
    pos.der == v;
    angle == [phi;theta; psi];  
end
end